# -*- coding: utf-8 -*-
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException
import unittest
import requests


class Upload(unittest.TestCase):
    def setUp(self):
        self.get_data()
        self.browser = webdriver.Chrome()

    def test_upload(self):
        sel = self.browser

        # We expect GeoServer to be up and serving pages.
        # This check shouldn't be done with selenium.
        r = requests.get("http://localhost/geoserver/web/")
        self.assertEquals(r.status_code, 200)

        # Try logging in first
        sel.get("http://localhost/account/login/?next=/")
        self.assertIn("example.com", sel.title)
        user = sel.find_element_by_id("id_username")
        user.send_keys("admin")
        passwd = sel.find_element_by_id("id_password")
        passwd.send_keys("exchange")
        sel.find_element_by_css_selector("form > button.btn-primary").click()
        WebDriverWait(sel, 10).until(
            EC.title_contains("Welcome")
        )

        # Then try to upload a layer
        sel.get("http://localhost/layers/?limit=100&offset=0")
        sel.find_element_by_link_text("Upload Layers").click()
        WebDriverWait(sel, 10).until(
            EC.title_contains("Upload Layer")
        )
        upload = sel.find_element_by_id("file-input")
        f = "/tmp/rivers"
        upload.send_keys(f + ".shp")
        upload.send_keys(f + ".shx")
        upload.send_keys(f + ".dbf")
        upload.send_keys(f + ".prj")
        sel.find_element_by_id("upload-button").click()
        element = WebDriverWait(sel, 90).until(
            EC.visibility_of_element_located((By.CSS_SELECTOR, "div.alert"))
        )

        # We do not expect any warnings.
        # But if we get one, we want to see its content for debugging.
        try:
            alert_warning = sel.find_element_by_class_name("alert-warning")
        except NoSuchElementException:
            alert_warning = None
        if alert_warning:
            self.assertFalse(
                alert_warning,
                msg="alert-warning: {0}".format(alert_warning.text)
            )
        # We expect a success indicator to be present in the DOM
        # If it's not, this should throw an exception
        alert_success = sel.find_element_by_class_name("alert-success")
        # We also expect that success indicator to be displayed
        self.assertTrue(
            alert_success.is_displayed(),
            "alert-success was not displayed"
        )

        # Given success, we expect a Layer Info button to exist; click on it
        layer_info = sel.find_element_by_link_text("Layer Info")
        layer_info.click()
        WebDriverWait(sel, 10).until(
            EC.title_contains("gis_osm_adminareas_v06")
        )

        # Then create a map
        sel.find_element_by_link_text("Create a Map").click()
        WebDriverWait(sel, 10).until(
            EC.title_contains("Explorer")
        )
        WebDriverWait(sel, 10).until(
            EC.frame_to_be_available_and_switch_to_it((By.CSS_SELECTOR, "iframe.maploom"))
        )
        element = WebDriverWait(sel, 30).until(
            EC.presence_of_element_located((By.ID, "saveButton"))
        )
        sel.find_element_by_id("saveButton").click()
        element = WebDriverWait(sel, 2).until(
            EC.visibility_of_element_located((By.ID, "saveMap"))
        )
        title = sel.find_element_by_id("mapTitle")
        title.send_keys("My Map")
        abstract = sel.find_element_by_id("mapAbstract")
        abstract.send_keys("This is a short summary of my map")
        element = WebDriverWait(sel, 2).until(
            EC.visibility_of_element_located((By.CSS_SELECTOR, "#save-map button:last-child"))
        )
        element.click()

        # Then look at the map explorer
        sel.get("http://localhost/maps/?limit=100&offset=0")
        sel.find_element_by_link_text("My Map").click()
        WebDriverWait(sel, 10).until(
            EC.title_contains("My Map")
        )

        # Then view the map
        sel.find_element_by_link_text("View Map").click()
        WebDriverWait(sel, 10).until(
            EC.title_contains("Explorer")
        )
        WebDriverWait(sel, 10).until(
            EC.frame_to_be_available_and_switch_to_it((By.CSS_SELECTOR, "iframe.maploom"))
        )
        the_map = WebDriverWait(sel, 30).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "canvas.ol-unselectable"))
        )
        actions = webdriver.ActionChains(sel)
        actions.move_to_element_with_offset(the_map, 400, 400)
        actions.click()
        actions.perform()
        overlay = WebDriverWait(sel, 5).until(
            EC.visibility_of_element_located((By.CLASS_NAME, "feature-info-box-popup"))
        )

    def get_data(self):
        filenames = [
            "rivers.shp",
            "rivers.shx",
            "rivers.dbf",
            "rivers.prj"
        ]
        path_template = "/tmp/{0}"
        url_template = (
            "https://github.com"
            "/GeoNode/geonode/raw/master"
            "/docs/tutorials/devel/geonode_apis/geoserver_rest/examples"
            "/resources/shapefiles/{0}"
        )
        for filename in filenames:
            url = url_template.format(filename)
            r = requests.get(url, stream=True)
            self.assertEquals(r.status_code, 200)
            local_path = path_template.format(filename)
            with open(local_path, "wb") as handle:
                for chunk in r.iter_content(4096):
                    handle.write(chunk)

    def tearDown(self):
        self.browser.quit()

if __name__ == "__main__":
    unittest.main()
